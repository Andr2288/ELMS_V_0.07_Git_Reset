// frontend/src/pages/ProfilePage.jsx

import { useState, useEffect } from "react";
import {
    User, Edit3, TrendingUp, BarChart3, Sparkles,
    BookOpen, Folder, Trophy, Target, Activity,
    Brain, Award, Star
} from "lucide-react";
import { useAuthStore } from "../store/useAuthStore.js";
import { useFlashcardStore } from "../store/useFlashcardStore.js";
import { useCategoryStore } from "../store/useCategoryStore.js";
import { useUserSettingsStore } from "../store/useUserSettingsStore.js";
import ProfileEditModal from "../components/ProfileEditModal.jsx";
import toast from "react-hot-toast";

const ProfilePage = () => {
    const { authUser, updateProfile, isUpdatingProfile } = useAuthStore();
    const { flashcards, getFlashcards } = useFlashcardStore();
    const { categories, getCategories } = useCategoryStore();
    const { settings, loadSettings } = useUserSettingsStore();

    // Modal state
    const [showEditModal, setShowEditModal] = useState(false);
    const [statsLoading, setStatsLoading] = useState(true);
    const [stats, setStats] = useState(null);

    // Load data on component mount
    useEffect(() => {
        loadAllData();
    }, []);

    const loadAllData = async () => {
        setStatsLoading(true);
        try {
            await Promise.all([
                getFlashcards(), // Load all flashcards for stats
                getCategories(),
                loadSettings()
            ]);
        } catch (error) {
            console.error("Error loading profile data:", error);
            toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é");
        } finally {
            setStatsLoading(false);
        }
    };

    // Calculate statistics whenever data changes
    useEffect(() => {
        if (flashcards && categories && !statsLoading) {
            calculateStats();
        }
    }, [flashcards, categories, statsLoading]);

    const calculateStats = () => {
        const now = new Date();
        const startOfWeek = new Date(now.setDate(now.getDate() - now.getDay()));
        const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
        const startOfYear = new Date(now.getFullYear(), 0, 1);

        // Basic counts
        const totalCards = flashcards.length;
        const totalCategories = categories.length;
        const aiGeneratedCards = flashcards.filter(card => card.isAIGenerated).length;
        const manualCards = totalCards - aiGeneratedCards;

        // Time-based stats
        const cardsThisWeek = flashcards.filter(card =>
            new Date(card.createdAt) >= startOfWeek
        ).length;

        const cardsThisMonth = flashcards.filter(card =>
            new Date(card.createdAt) >= startOfMonth
        ).length;

        const cardsThisYear = flashcards.filter(card =>
            new Date(card.createdAt) >= startOfYear
        ).length;

        // Category distribution
        const categoryStats = categories.map(category => {
            const cardsInCategory = flashcards.filter(card =>
                card.categoryId?._id === category._id
            ).length;
            return {
                id: category._id,
                name: category.name,
                color: category.color,
                count: cardsInCategory,
                percentage: totalCards > 0 ? (cardsInCategory / totalCards * 100) : 0
            };
        }).sort((a, b) => b.count - a.count);

        // Uncategorized cards
        const uncategorizedCount = flashcards.filter(card => !card.categoryId).length;
        if (uncategorizedCount > 0) {
            categoryStats.push({
                id: 'uncategorized',
                name: '–ë–µ–∑ –ø–∞–ø–∫–∏',
                color: '#6B7280',
                count: uncategorizedCount,
                percentage: totalCards > 0 ? (uncategorizedCount / totalCards * 100) : 0
            });
        }

        // Activity by day of week (last 7 days)
        const weeklyActivity = Array.from({ length: 7 }, (_, i) => {
            const date = new Date();
            date.setDate(date.getDate() - i);
            const dayCards = flashcards.filter(card => {
                const cardDate = new Date(card.createdAt);
                return cardDate.toDateString() === date.toDateString();
            }).length;

            return {
                day: date.toLocaleDateString('uk-UA', { weekday: 'short' }),
                date: date.toLocaleDateString('uk-UA', { day: 'numeric', month: 'short' }),
                count: dayCards
            };
        }).reverse();



        // Learning streaks and achievements
        const achievements = calculateAchievements(totalCards, aiGeneratedCards, categoryStats, cardsThisWeek, flashcards);

        setStats({
            totalCards,
            totalCategories,
            aiGeneratedCards,
            manualCards,
            cardsThisWeek,
            cardsThisMonth,
            cardsThisYear,
            categoryStats: categoryStats.slice(0, 5), // Top 5 categories
            weeklyActivity,
            monthlyActivity,
            achievements
        });
    };

    const calculateAchievements = (totalCards, aiCards, categoryStats, weekCards, flashcards) => {
        // –í—Å—ñ –º–æ–∂–ª–∏–≤—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è–º
        const allAchievements = {
            creation: {
                title: "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫",
                icon: "üìö",
                color: "blue",
                achievements: [
                    { id: 'first_card', icon: 'üå±', title: '–ü–µ—Ä—à—ñ –∫—Ä–æ–∫–∏', description: '–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤–æ—é –ø–µ—Ä—à—É –∫–∞—Ä—Ç–∫—É', threshold: 1, color: 'text-green-600' },
                    { id: 'getting_started', icon: 'üöÄ', title: '–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å', description: '10+ –∫–∞—Ä—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ', threshold: 10, color: 'text-green-600' },
                    { id: 'steady_learner', icon: 'üìñ', title: '–ü–æ—Å—Ç—ñ–π–Ω–∏–π —É—á–µ–Ω—å', description: '50+ –∫–∞—Ä—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ', threshold: 50, color: 'text-blue-600' },
                    { id: 'scholar', icon: 'üéì', title: '–í—á–µ–Ω–∏–π', description: '100+ –∫–∞—Ä—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ', threshold: 100, color: 'text-blue-600' },
                    { id: 'expert', icon: 'üë®‚Äçüè´', title: '–ï–∫—Å–ø–µ—Ä—Ç', description: '500+ –∫–∞—Ä—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ', threshold: 500, color: 'text-purple-600' },
                    { id: 'master', icon: 'üëë', title: '–ú–∞–π—Å—Ç–µ—Ä –≤–∏–≤—á–µ–Ω–Ω—è', description: '1000+ –∫–∞—Ä—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ', threshold: 1000, color: 'text-yellow-600' },
                ]
            },
            ai: {
                title: "–®–Ü –∞—Å–∏—Å—Ç–µ–Ω—Ç",
                icon: "ü§ñ",
                color: "purple",
                achievements: [
                    { id: 'ai_curious', icon: 'üîç', title: '–¶—ñ–∫–∞–≤–∏–π –¥–æ –®–Ü', description: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –®–Ü –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—à–æ—ó –∫–∞—Ä—Ç–∫–∏', threshold: 1, color: 'text-purple-600' },
                    { id: 'ai_user', icon: '‚ö°', title: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –®–Ü', description: '10+ –∫–∞—Ä—Ç–æ–∫ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –®–Ü', threshold: 10, color: 'text-purple-600' },
                    { id: 'ai_enthusiast', icon: 'üß†', title: '–ï–Ω—Ç—É–∑—ñ–∞—Å—Ç –®–Ü', description: '50+ –∫–∞—Ä—Ç–æ–∫ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –®–Ü', threshold: 50, color: 'text-purple-600' },
                    { id: 'ai_master', icon: 'ü§ñ', title: '–®–Ü-–º–∞–π—Å—Ç–µ—Ä', description: '100+ –∫–∞—Ä—Ç–æ–∫ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –®–Ü', threshold: 100, color: 'text-purple-600' },
                ]
            },
            organization: {
                title: "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è",
                icon: "üìÅ",
                color: "emerald",
                achievements: [
                    { id: 'first_folder', icon: 'üìÇ', title: '–ü–µ—Ä—à–∞ –ø–∞–ø–∫–∞', description: '–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤–æ—é –ø–µ—Ä—à—É –ø–∞–ø–∫—É', threshold: 1, color: 'text-emerald-600' },
                    { id: 'organizer', icon: 'üóÇÔ∏è', title: '–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä', description: '5+ –ø–∞–ø–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ', threshold: 5, color: 'text-emerald-600' },
                    { id: 'categorizer', icon: 'üìö', title: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä', description: '10+ –ø–∞–ø–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ', threshold: 10, color: 'text-emerald-600' },
                    { id: 'architect', icon: 'üèóÔ∏è', title: '–ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞–Ω—å', description: '20+ –ø–∞–ø–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ', threshold: 20, color: 'text-emerald-600' },
                ]
            },
            activity: {
                title: "–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å",
                icon: "‚ö°",
                color: "orange",
                achievements: [
                    { id: 'daily_learner', icon: '‚òÄÔ∏è', title: '–©–æ–¥–µ–Ω–Ω–∏–π —É—á–µ–Ω—å', description: '3+ –∫–∞—Ä—Ç–∫–∏ –∑–∞ –¥–µ–Ω—å', threshold: 3, color: 'text-orange-600' },
                    { id: 'weekly_active', icon: 'üìÖ', title: '–ê–∫—Ç–∏–≤–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å', description: '10+ –∫–∞—Ä—Ç–æ–∫ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å', threshold: 10, color: 'text-orange-600' },
                    { id: 'productive_week', icon: 'üî•', title: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å', description: '20+ –∫–∞—Ä—Ç–æ–∫ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å', threshold: 20, color: 'text-orange-600' },
                    { id: 'super_active', icon: 'üí™', title: '–°—É–ø–µ—Ä –∞–∫—Ç–∏–≤–Ω–∏–π', description: '50+ –∫–∞—Ä—Ç–æ–∫ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å', threshold: 50, color: 'text-orange-600' },
                    { id: 'month_champion', icon: 'üèÜ', title: '–ß–µ–º–ø—ñ–æ–Ω –º—ñ—Å—è—Ü—è', description: '100+ –∫–∞—Ä—Ç–æ–∫ –∑–∞ –º—ñ—Å—è—Ü—å', threshold: 100, color: 'text-orange-600' },
                ]
            },
            special: {
                title: "–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ",
                icon: "‚≠ê",
                color: "pink",
                achievements: [
                    { id: 'balanced', icon: '‚öñÔ∏è', title: '–ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π', description: '50% –∫–∞—Ä—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –®–Ü, 50% –≤—Ä—É—á–Ω—É', threshold: 'balanced', color: 'text-pink-600' },
                    { id: 'completionist', icon: '‚úÖ', title: '–ó–∞–≤–µ—Ä—à—É–≤–∞—á', description: '–í—Å—ñ –∫–∞—Ä—Ç–∫–∏ –º–∞—é—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ —ñ –ø—Ä–∏–∫–ª–∞–¥–∏', threshold: 'complete', color: 'text-pink-600' },
                    { id: 'linguist', icon: 'üåç', title: '–õ—ñ–Ω–≥–≤—ñ—Å—Ç', description: '–ö–∞—Ä—Ç–∫–∏ –∑ 3+ —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤', threshold: 'multilingual', color: 'text-pink-600' },
                ]
            }
        };

        // –û–±—á–∏—Å–ª—é—î–º–æ —è–∫—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –¥–æ—Å—è–≥–Ω—É—Ç—ñ
        const monthCards = flashcards.filter(card => {
            const cardDate = new Date(card.createdAt);
            const monthAgo = new Date();
            monthAgo.setMonth(monthAgo.getMonth() - 1);
            return cardDate >= monthAgo;
        }).length;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏
        Object.keys(allAchievements).forEach(groupKey => {
            const group = allAchievements[groupKey];
            group.achievements = group.achievements.map(achievement => {
                let isUnlocked = false;

                switch (groupKey) {
                    case 'creation':
                        isUnlocked = totalCards >= achievement.threshold;
                        break;
                    case 'ai':
                        isUnlocked = aiCards >= achievement.threshold;
                        break;
                    case 'organization':
                        isUnlocked = categoryStats.length >= achievement.threshold;
                        break;
                    case 'activity':
                        if (achievement.id === 'daily_learner') {
                            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                            const today = new Date().toDateString();
                            const todayCards = flashcards.filter(card =>
                                new Date(card.createdAt).toDateString() === today
                            ).length;
                            isUnlocked = todayCards >= achievement.threshold;
                        } else if (achievement.id === 'month_champion') {
                            isUnlocked = monthCards >= achievement.threshold;
                        } else {
                            isUnlocked = weekCards >= achievement.threshold;
                        }
                        break;
                    case 'special':
                        if (achievement.threshold === 'balanced' && totalCards >= 20) {
                            const aiPercentage = (aiCards / totalCards) * 100;
                            isUnlocked = aiPercentage >= 40 && aiPercentage <= 60;
                        } else if (achievement.threshold === 'complete' && totalCards >= 10) {
                            const completeCards = flashcards.filter(card =>
                                card.translation && (card.examples?.length > 0 || card.example)
                            ).length;
                            isUnlocked = completeCards === totalCards;
                        } else if (achievement.threshold === 'multilingual') {
                            // –¶–µ —Å–∫–ª–∞–¥–Ω—ñ—à–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö, –ø–æ–∫–∏ —â–æ false
                            isUnlocked = false;
                        }
                        break;
                }

                return {
                    ...achievement,
                    isUnlocked
                };
            });
        });

        return allAchievements;
    };

    // Open edit modal
    const handleEdit = () => {
        setShowEditModal(true);
    };

    // Handle profile update from modal
    const handleProfileUpdate = async (formData) => {
        try {
            console.log("Updating profile with data:", formData);
            await updateProfile(formData);
            setShowEditModal(false);
        } catch (error) {
            console.error("Profile update error:", error);
            // Error is handled in the store and modal
            throw error; // Re-throw so modal can handle it
        }
    };

    // Close edit modal
    const handleCloseModal = () => {
        setShowEditModal(false);
    };

    if (!authUser) {
        return (
            <div className="ml-64 min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <User className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="ml-64 min-h-screen bg-gray-50">
            {/* Header */}
            <div className="bg-white shadow-sm border-b">
                <div className="px-8 py-6">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                            <div className="p-2 bg-blue-100 rounded-lg">
                                <User className="w-6 h-6 text-blue-600" />
                            </div>
                            <div>
                                <h1 className="text-2xl font-bold text-gray-900">–ü—Ä–æ—Ñ—ñ–ª—å</h1>
                                <p className="text-gray-600 mt-1">–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div className="p-8">
                <div className="max-w-7xl mx-auto space-y-8">

                    {/* Profile Card - Clean Design */}
                    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                        <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-4">
                                {/* Profile Picture */}
                                <div className="w-20 h-20 rounded-full bg-gray-100 overflow-hidden">
                                    {authUser.profilePic ? (
                                        <img
                                            src={authUser.profilePic}
                                            alt="Profile"
                                            className="w-full h-full object-cover"
                                        />
                                    ) : (
                                        <div className="w-full h-full flex items-center justify-center">
                                            <User className="w-10 h-10 text-gray-400" />
                                        </div>
                                    )}
                                </div>

                                {/* Profile Info */}
                                <div>
                                    <h2 className="text-2xl font-semibold text-gray-900">
                                        {authUser.fullName}
                                    </h2>
                                    <p className="text-gray-600 text-sm mt-1">{authUser.email}</p>
                                    <p className="text-gray-500 text-xs mt-1">
                                        –ó –Ω–∞–º–∏ –∑ {new Date(authUser.createdAt || Date.now()).toLocaleDateString('uk-UA')}
                                    </p>
                                </div>
                            </div>

                            {/* Edit Button */}
                            <div>
                                <button
                                    onClick={handleEdit}
                                    disabled={isUpdatingProfile}
                                    className="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white px-6 py-3 rounded-lg text-sm flex items-center space-x-2 transition-colors disabled:cursor-not-allowed"
                                >
                                    <Edit3 className="w-4 h-4" />
                                    <span>
                                        {isUpdatingProfile ? "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è..." : "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"}
                                    </span>
                                </button>
                            </div>
                        </div>
                    </div>

                    {statsLoading ? (
                        <div className="text-center py-12">
                            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                            <p className="mt-4 text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
                        </div>
                    ) : stats ? (
                        <>
                            {/* Quick Stats */}
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <p className="text-sm font-medium text-gray-600">–í—Å—å–æ–≥–æ –∫–∞—Ä—Ç–æ–∫</p>
                                            <p className="text-3xl font-bold text-blue-600">{stats.totalCards}</p>
                                        </div>
                                        <div className="p-3 bg-blue-100 rounded-lg">
                                            <BookOpen className="w-6 h-6 text-blue-600" />
                                        </div>
                                    </div>
                                    <p className="text-xs text-gray-500 mt-2">
                                        +{stats.cardsThisMonth} —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è
                                    </p>
                                </div>

                                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <p className="text-sm font-medium text-gray-600">–ü–∞–ø–æ–∫</p>
                                            <p className="text-3xl font-bold text-green-600">{stats.totalCategories}</p>
                                        </div>
                                        <div className="p-3 bg-green-100 rounded-lg">
                                            <Folder className="w-6 h-6 text-green-600" />
                                        </div>
                                    </div>
                                    <p className="text-xs text-gray-500 mt-2">
                                        –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
                                    </p>
                                </div>

                                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <p className="text-sm font-medium text-gray-600">–®–Ü-–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è</p>
                                            <p className="text-3xl font-bold text-purple-600">{stats.aiGeneratedCards}</p>
                                        </div>
                                        <div className="p-3 bg-purple-100 rounded-lg">
                                            <Sparkles className="w-6 h-6 text-purple-600" />
                                        </div>
                                    </div>
                                    <p className="text-xs text-gray-500 mt-2">
                                        {stats.totalCards > 0 ? Math.round(stats.aiGeneratedCards / stats.totalCards * 100) : 0}% –≤—ñ–¥ —É—Å—ñ—Ö –∫–∞—Ä—Ç–æ–∫
                                    </p>
                                </div>

                                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <p className="text-sm font-medium text-gray-600">–¶—å–æ–≥–æ —Ç–∏–∂–Ω—è</p>
                                            <p className="text-3xl font-bold text-orange-600">{stats.cardsThisWeek}</p>
                                        </div>
                                        <div className="p-3 bg-orange-100 rounded-lg">
                                            <TrendingUp className="w-6 h-6 text-orange-600" />
                                        </div>
                                    </div>
                                    <p className="text-xs text-gray-500 mt-2">
                                        –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ 7 –¥–Ω—ñ–≤
                                    </p>
                                </div>
                            </div>

                            {/* Charts and detailed stats */}
                            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">

                                {/* Weekly Activity */}
                                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                                    <div className="flex items-center space-x-3 mb-6">
                                        <Activity className="w-5 h-5 text-blue-600" />
                                        <h3 className="text-lg font-semibold text-gray-900">–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ —Ç–∏–∂–¥–µ–Ω—å</h3>
                                    </div>
                                    <div className="space-y-4">
                                        {stats.weeklyActivity.map((day, index) => (
                                            <div key={index} className="flex items-center space-x-3">
                                                <div className="w-12 text-sm text-gray-600 text-right">
                                                    {day.day}
                                                </div>
                                                <div className="flex-1">
                                                    <div className="bg-gray-200 rounded-full h-3 relative overflow-hidden">
                                                        <div
                                                            className="bg-blue-500 h-full rounded-full transition-all duration-500"
                                                            style={{
                                                                width: `${Math.max(5, (day.count / Math.max(...stats.weeklyActivity.map(d => d.count), 1)) * 100)}%`
                                                            }}
                                                        ></div>
                                                    </div>
                                                </div>
                                                <div className="w-8 text-sm font-medium text-gray-700 text-right">
                                                    {day.count}
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>

                                {/* Category Distribution */}
                                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                                    <div className="flex items-center space-x-3 mb-6">
                                        <BarChart3 className="w-5 h-5 text-green-600" />
                                        <h3 className="text-lg font-semibold text-gray-900">–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</h3>
                                    </div>
                                    <div className="space-y-4">
                                        {stats.categoryStats.slice(0, 5).map((category, index) => (
                                            <div key={category.id} className="flex items-center space-x-3">
                                                <div className="flex items-center space-x-2 flex-1">
                                                    <div
                                                        className="w-4 h-4 rounded"
                                                        style={{ backgroundColor: category.color }}
                                                    ></div>
                                                    <span className="text-sm font-medium text-gray-700 truncate">
                                                        {category.name}
                                                    </span>
                                                </div>
                                                <div className="flex items-center space-x-3">
                                                    <div className="w-24 bg-gray-200 rounded-full h-2">
                                                        <div
                                                            className="h-full rounded-full"
                                                            style={{
                                                                backgroundColor: category.color,
                                                                width: `${Math.max(5, category.percentage)}%`
                                                            }}
                                                        ></div>
                                                    </div>
                                                    <span className="text-sm font-medium text-gray-600 w-8 text-right">
                                                        {category.count}
                                                    </span>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>


                            </div>

                            {/* Achievements - Full Width */}
                            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                                <div className="flex items-center space-x-3 mb-6">
                                    <Trophy className="w-5 h-5 text-yellow-600" />
                                    <h3 className="text-lg font-semibold text-gray-900">–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è</h3>
                                </div>

                                {stats.achievements && Object.keys(stats.achievements).length > 0 ? (
                                    <div className="space-y-6">
                                        {Object.entries(stats.achievements).map(([groupKey, group]) => {
                                            const unlockedCount = group.achievements.filter(a => a.isUnlocked).length;
                                            const totalCount = group.achievements.length;

                                            // –ú–∞–ø—ñ–Ω–≥ –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ Tailwind
                                            const colorMap = {
                                                blue: { bg: 'bg-blue-500', text: 'text-blue-700', border: 'border-blue-200' },
                                                purple: { bg: 'bg-purple-500', text: 'text-purple-700', border: 'border-purple-200' },
                                                emerald: { bg: 'bg-emerald-500', text: 'text-emerald-700', border: 'border-emerald-200' },
                                                orange: { bg: 'bg-orange-500', text: 'text-orange-700', border: 'border-orange-200' },
                                                pink: { bg: 'bg-pink-500', text: 'text-pink-700', border: 'border-pink-200' }
                                            };

                                            const colors = colorMap[group.color] || colorMap.blue;

                                            return (
                                                <div key={groupKey} className="border border-gray-100 rounded-lg p-4">
                                                    {/* Group Header */}
                                                    <div className="flex items-center justify-between mb-4">
                                                        <div className="flex items-center space-x-2">
                                                            <span className="text-lg">{group.icon}</span>
                                                            <h4 className={`font-semibold ${colors.text}`}>
                                                                {group.title}
                                                            </h4>
                                                        </div>
                                                        <div className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                                                            {unlockedCount}/{totalCount}
                                                        </div>
                                                    </div>

                                                    {/* Progress Bar */}
                                                    <div className="mb-4">
                                                        <div className="w-full bg-gray-200 rounded-full h-2">
                                                            <div
                                                                className={`${colors.bg} h-2 rounded-full transition-all duration-500`}
                                                                style={{ width: `${(unlockedCount / totalCount) * 100}%` }}
                                                            ></div>
                                                        </div>
                                                    </div>

                                                    {/* Achievements Grid */}
                                                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                                                        {group.achievements.map((achievement) => (
                                                            <div
                                                                key={achievement.id}
                                                                className={`flex items-center space-x-3 p-3 rounded-lg transition-all ${
                                                                    achievement.isUnlocked
                                                                        ? 'bg-green-50 border border-green-200'
                                                                        : 'bg-gray-50 border border-gray-200 opacity-60'
                                                                }`}
                                                            >
                                                                <div className={`text-xl ${achievement.isUnlocked ? '' : 'grayscale'}`}>
                                                                    {achievement.icon}
                                                                </div>
                                                                <div className="flex-1 min-w-0">
                                                                    <h5 className={`font-medium text-sm ${
                                                                        achievement.isUnlocked
                                                                            ? achievement.color
                                                                            : 'text-gray-500'
                                                                    }`}>
                                                                        {achievement.title}
                                                                    </h5>
                                                                    <p className={`text-xs ${
                                                                        achievement.isUnlocked
                                                                            ? 'text-gray-600'
                                                                            : 'text-gray-400'
                                                                    } truncate`}>
                                                                        {achievement.description}
                                                                    </p>
                                                                </div>
                                                                {achievement.isUnlocked && (
                                                                    <div className="flex-shrink-0">
                                                                        <Award className="w-4 h-4 text-green-600" />
                                                                    </div>
                                                                )}
                                                            </div>
                                                        ))}
                                                    </div>
                                                </div>
                                            );
                                        })}
                                    </div>
                                ) : (
                                    <div className="text-center py-8">
                                        <Target className="w-12 h-12 text-gray-400 mx-auto mb-3" />
                                        <p className="text-gray-500">–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤–æ—é –ø–µ—Ä—à—É –∫–∞—Ä—Ç–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω—å!</p>
                                    </div>
                                )}
                            </div>

                            {/* Learning Insights */}
                            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl border border-blue-200 p-6">
                                <div className="flex items-center space-x-3 mb-4">
                                    <Brain className="w-6 h-6 text-blue-600" />
                                    <h3 className="text-xl font-semibold text-gray-900">–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è</h3>
                                </div>
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                                    <div className="text-center">
                                        <div className="text-3xl font-bold text-blue-600 mb-1">
                                            {stats.totalCards > 0 ? Math.round(stats.aiGeneratedCards / stats.totalCards * 100) : 0}%
                                        </div>
                                        <p className="text-sm text-gray-700">–®–Ü-–∞—Å–∏—Å—Ç–µ–Ω—Ç</p>
                                        <p className="text-xs text-gray-500 mt-1">–ö–∞—Ä—Ç–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∑ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü</p>
                                    </div>
                                    <div className="text-center">
                                        <div className="text-3xl font-bold text-green-600 mb-1">
                                            {stats.cardsThisWeek > 0 ? Math.round(stats.cardsThisWeek / 7 * 10) / 10 : 0}
                                        </div>
                                        <p className="text-sm text-gray-700">–ö–∞—Ä—Ç–æ–∫/–¥–µ–Ω—å</p>
                                        <p className="text-xs text-gray-500 mt-1">–°–µ—Ä–µ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∏–∂–Ω—è</p>
                                    </div>
                                    <div className="text-center">
                                        <div className="text-3xl font-bold text-purple-600 mb-1">
                                            {stats.totalCategories > 0 ? Math.round(stats.totalCards / stats.totalCategories * 10) / 10 : 0}
                                        </div>
                                        <p className="text-sm text-gray-700">–ö–∞—Ä—Ç–æ–∫/–ø–∞–ø–∫–∞</p>
                                        <p className="text-xs text-gray-500 mt-1">–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –ø–∞–ø—Ü—ñ</p>
                                    </div>
                                </div>
                            </div>

                        </>
                    ) : (
                        <div className="text-center py-12">
                            <BookOpen className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                            <h3 className="text-xl font-medium text-gray-900 mb-2">–©–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö</h3>
                            <p className="text-gray-600">–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤–æ—ó –ø–µ—Ä—à—ñ —Ñ–ª–µ—à–∫–∞—Ä—Ç–∫–∏, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</p>
                        </div>
                    )}
                </div>
            </div>

            {/* Profile Edit Modal */}
            <ProfileEditModal
                isOpen={showEditModal}
                onClose={handleCloseModal}
                onSave={handleProfileUpdate}
                initialData={authUser}
                isLoading={isUpdatingProfile}
            />
        </div>
    );
};

export default ProfilePage;